#--- s4_procedure.rml.ttl ---
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix locn: <http://www.w3.org/ns/locn#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix tedm: <http://data.europa.eu/a4g/mapping/sf-rml/> .
@prefix epo: <http://data.europa.eu/a4g/ontology#> .
@prefix epd: <http://data.europa.eu/a4g/resource/> .
tedm:procedure
  a owl:Ontology ;
  owl:imports dct:, <http://www.w3.org/2004/02/skos/core> ;
  dct:description """
        This module provides the mapping definitions for the ..."""@en ;
  rdfs:label "TED-SWS mapping of "@en ;  
  dct:date "2022-05-11"^^xsd:date .

tedm:ProcedureIdentifier a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasIdentifierValue;
            rr:objectMap
                [
                    rml:reference "./REFERENCE_NUMBER"
                ]
        ] .

tedm:Procedure a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasProcedureType ;
            rr:objectMap
                [
                    rml:reference "if(exists(../PROCEDURE/PT_OPEN) or exists(../PROCEDURE/PT_AWARD_CONTRACT_WITH_PRIOR_PUBLICATION)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/open' else if(exists(../PROCEDURE/PT_RESTRICTED)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/restricted' else if(exists(../PROCEDURE/PT_COMPETITIVE_NEGOTIATION) or exists(../PROCEDURE/PT_INVOLVING_NEGOTIATION) or exists(../PROCEDURE/PT_NEGOTIATED_WITH_PRIOR_CALL)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/neg-w-call' else if(exists(../PROCEDURE/PT_COMPETITIVE_DIALOGUE)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/comp-dial' else if(exists(../PROCEDURE/PT_INNOVATION_PARTNERSHIP)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/innovation' else if(exists(../PROCEDURE/PT_AWARD_CONTRACT_WITHOUT_CALL) or exists(../PROCEDURE/PT_AWARD_CONTRACT_WITHOUT_PUBLICATION)) then 'http://publications.europa.eu/resource/authority/procurement-procedure-type/neg-wo-call' else null";
                    rr:termType rr:IRI
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAcceleratedProcedureJustification ;
            rr:objectMap
                [
                    rml:reference "../PROCEDURE/ACCELERATED_PROC";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isAccelerated ;
            rr:objectMap
                [
#                    rml:reference "if(exists(../PROCEDURE/ACCELERATED_PROC)) then 'true' else 'false'";
                    rml:reference "if(exists(../PROCEDURE/ACCELERATED_PROC)) then 'true' else null";
                    rr:datatype xsd:boolean
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isCoveredByGPA;
            rr:objectMap
                [
                    rml:reference "if(exists(../PROCEDURE/CONTRACT_COVERED_GPA)) then 'true' else if(exists(../PROCEDURE/NO_CONTRACT_COVERED_GPA)) then 'false' else null";
                    rr:datatype xsd:boolean
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:usesChannel ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ElectronicCommunicationChannel;
                    rr:joinCondition [
                        rr:child "..";
                        rr:parent "../..";
                    ];
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:usesTechnique ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:DynamicPurchaseSystemTechniqueUsage
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isSubjectToProcedureSpecificTerm ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:SubmissionTerm
                ] ;
        ] ;

    rr:predicateObjectMap
        [
            rr:predicate epo:usesTechnique ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:FrameworkAgreementTechniqueUsage
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isSubjectToProcedureSpecificTerm ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:FrameworkAgreementTerm
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isSubjectToProcedureSpecificTerm ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:AccessTerm
                ] ;
        ] ;
# Commenting this out as this is not an appropriate mapping for the field IV.2.5. EPO 3.1.0 does not provide an appropriate model.
# We will map this field when future EPO versions will provide an appropriate representation for it.
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:isSubjectToTerm ;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ProcessPlanningTermProcedure
#                ] ;
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:usesTechnique ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:EAuctionTechniqueUsage
                ] ;
        ] .
# Commenting this out as this is not an appropriate mapping for the field IV.2.5. EPO 3.1.0 does not provide an appropriate model.
# We will map this field when future EPO versions will provide an appropriate representation for it.
#tedm:ProcessPlanningTermProcedure a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasAwardDateScheduled ;
#            rr:objectMap
#                [
#                    rml:reference "DATE_AWARD_SCHEDULED";
#                    rr:datatype xsd:date
#                ] ;
#        ] .
tedm:ProcurementProcessInformation a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isDPSTerminated ;
            rr:objectMap
                [
                    rml:reference "if(exists(TERMINATION_DPS)) then 'true' else null";
                    rr:datatype xsd:boolean
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isCompetitionTerminated ;
            rr:objectMap
                [
                    rml:reference "if(exists(TERMINATION_PIN) or exists(../RESULTS/NO_AWARDED_PRIZE)) then 'true' else null";
                    rr:datatype xsd:boolean
                ] ;
        ] ;
#     rr:predicateObjectMap
#        [
#            rr:predicate epo:concernsPreviousNotice;
#            rr:objectMap
#            [
#                rr:parentTriplesMap tedm:PreviousNotice;
#            ]
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:concernsProcedure ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Procedure
                ] ;
        ] .

tedm:FrameworkAgreementTerm a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasDurationExtensionJustification ;
            rr:objectMap
                [
                    rml:reference "FRAMEWORK/JUSTIFICATION";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ] ;
        ] .
tedm:ProcedureTerm a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasNationalProcedureRules ;
            rr:objectMap
                [
                    rml:reference "../PROCEDURE/URL_NATIONAL_PROCEDURE";
                    rr:datatype xsd:anyURI;
                ] ;
        ] .
tedm:SubmissionTerm a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceiptDeadline ;
            rr:objectMap
                [
#                   # We likely don't need to include the conditions for the notice types:
#                   # - "PRI", as in case of F23 this information will only appear in the "PRI notices (and should not appear in "CONCESSION_AWARD_CONTRACT" notices
#                   # - "QSU_ONLY" and "PER_ONLY", as for those type of notices we should not have this type of information specified; however, in case they are (by mistake/oversight), we will map it to this property
                    rml:reference "if(../NOTICE/@TYPE='CONTRACT' or ../NOTICE/@TYPE='PRI' or ../NOTICE/@TYPE='QSU_ONLY' or ../NOTICE/@TYPE='QSU_CALL_COMPETITION' or ../NOTICE/@TYPE='PER_ONLY') then (if(exists(DATE_RECEIPT_TENDERS) and exists(TIME_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T' || TIME_RECEIPT_TENDERS else if(exists(DATE_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS else null) else null";
                    rr:datatype xsd:string
#                    # below is the original, smarter, mapping to ensure conversion to a proper xsd:dateTime value:
#                    rml:reference "if(../NOTICE/@TYPE='CONTRACT' or ../NOTICE/@TYPE='PRI' or ../NOTICE/@TYPE='QSU_ONLY' or ../NOTICE/@TYPE='QSU_CALL_COMPETITION' or ../NOTICE/@TYPE='PER_ONLY') then (if(exists(DATE_RECEIPT_TENDERS) and exists(TIME_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T' || TIME_RECEIPT_TENDERS || ':00' else if(exists(DATE_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T00:00:00' else null) else null";
#                    rr:datatype xsd:dateTime
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceiptExpressionDeadline ;
            rr:objectMap
                [
                    rml:reference "if(../NOTICE/@TYPE='PRI_CALL_COMPETITION' or ../NOTICE/@TYPE='PER_CALL_COMPETITION') then (if(exists(DATE_RECEIPT_TENDERS) and exists(TIME_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T' || TIME_RECEIPT_TENDERS else if(exists(DATE_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS else null) else null";
                    rr:datatype xsd:string
#                    # below is the original, smarter, mapping to ensure conversion to a proper xsd:dateTime value:
#                    rml:reference "if(../NOTICE/@TYPE='PRI_CALL_COMPETITION' or ../NOTICE/@TYPE='PER_CALL_COMPETITION') then (if(exists(DATE_RECEIPT_TENDERS) and exists(TIME_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T' || TIME_RECEIPT_TENDERS || ':00' else if(exists(DATE_RECEIPT_TENDERS)) then DATE_RECEIPT_TENDERS || 'T00:00:00' else null) else null";
#                    rr:datatype xsd:dateTime
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasLanguage ;
            rr:objectMap
                [
                    rml:reference "LANGUAGES/LANGUAGE/@VALUE";
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasSubmissionURL ;
            rr:objectMap
                [
                    rml:reference "../CONTRACTING_BODY/URL_PARTICIPATION";
                    rr:datatype xsd:anyURI;
                ] ;
        ] .

