#--- s5_award_of_contract.rml.ttl ---
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix locn: <http://www.w3.org/ns/locn#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix tedm: <http://data.europa.eu/a4g/mapping/sf-rml/> .
@prefix epo: <http://data.europa.eu/a4g/ontology#> .
@prefix epd: <http://data.europa.eu/a4g/resource/> .
@prefix cpov: <http://data.europa.eu/m8g/> .
@prefix cv: <http://data.europa.eu/m8g/> .

tedm:award_of_contract
  a owl:Ontology ;
  owl:imports dct:, <http://www.w3.org/2004/02/skos/core> ;
  dct:description """
        This module provides the mapping definitions for the ..."""@en ;
  rdfs:label "TED-SWS mapping of "@en ;
  dct:date "2022-05-11"^^xsd:date .

#tedm:PurchaseContract a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:isWithinFrameworkAgreement;
#            rr:objectMap
#                [
#                    rml:reference "if(exists(AWARDED_TO_GROUP)) then 'true' else if(exists(NO_AWARDED_TO_GROUP)) then 'false' else null";
#                    rr:datatype xsd:boolean
#
#                ]
#        ] .

# This mapping was removed as EPO 3.1.0 and the Standard form XSD does not provide appropriate model
# for representing grouping of Winners per TenderAwardOutcome. See GH issue #245
#tedm:ContractorOrganisationGroup a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasMember;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ContractorOrganisation;
#                    rr:joinCondition [
#                        rr:child "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                    ];
#                ]
#        ] ;
#
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasMember;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ContractorOrganisation;
#                    rr:joinCondition [
#                        rr:child "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT/CONTRACTORS/CONTRACTOR | ancestor::AWARD_CONTRACT/AWARDED_CONTRACT/CONTRACTOR";
#                        rr:parent "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT/CONTRACTORS/CONTRACTOR | ancestor::AWARD_CONTRACT/AWARDED_CONTRACT/CONTRACTOR";
#                    ];
#                ]
#        ] .
tedm:Contract a rr:TriplesMap ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:signedBySignatory ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:ContractSignatoryonContractorSide;
#                rr:joinCondition [
#                    rr:child "./@ITEM";
#                    rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                ];
#            ] ;
#    ] ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:bindsBuyer ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:AdditionalBuyer;
#            ] ;
#    ] ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:bindsBuyer ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:AdditionalBuyerCP;
#            ] ;
#    ] ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:bindsContractor ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:ContractorRole;
#                rr:joinCondition [
#                    rr:child "./@ITEM";
#                    rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                ];
#            ] ;
#    ] ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:bindsBuyer ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:Buyer;
#            ] ;
#    ] ;
#    rr:predicateObjectMap
#    [
#        rr:predicate epo:bindsBuyer ;
#        rr:objectMap
#            [
#                rr:parentTriplesMap tedm:BuyerCP;
#            ] ;
#    ] ;
#    rr:predicateObjectMap   #specific for F23 and F25
#        [
#            rr:predicate rdf:type;
#            rr:objectMap
#                [
#                    rml:reference "if ((../@FORM='F23' or ../@FORM='F25') and exists(AWARDED_CONTRACT)) then 'http://data.europa.eu/a4g/ontology#ConcessionContract' else null";
#                    rr:termType rr:IRI;
#                ]
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasTitle;
            rr:objectMap
                [
                    rml:reference "TITLE";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasID;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractIdentifier;
                    rr:joinCondition [
                        rr:child "./CONTRACT_NO";
                        rr:parent "./CONTRACT_NO";
                    ];
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:includesLot ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Lot;
                    rr:joinCondition [
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ./LOT_NO";
#                        rr:parent "if (count(../OBJECT_DESCR)=1) then ./@ITEM else ./LOT_NO";
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then ../OBJECT_CONTRACT/OBJECT_DESCR else ./LOT_NO";
#                        rr:parent "if (count(../OBJECT_DESCR)=1) then ../OBJECT_DESCR else ./LOT_NO";
                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ./LOT_NO";
                        rr:parent "if (count(../OBJECT_DESCR)=1) then (if(exists(./@ITEM)) then ./@ITEM else 1) else ./LOT_NO   ";
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)>1) then ./LOT_NO else 1";
#                        rr:parent "if (count(../OBJECT_DESCR)>1) then ./LOT_NO else if(exists(./@ITEM)) then ./@ITEM else 1";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate rdfs:comment ;
            rr:objectMap
                [
                    rml:reference "if(not(exists(LOT_NO)) and count(/TED_EXPORT/FORM_SECTION/F03_2014[1]/OBJECT_CONTRACT/OBJECT_DESCR)>1) then 'Erroneous XML data: this contract does not have a <LOT_NO> element' else null";
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:resultsFromLotAwardOutcome;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:LotAwardOutcome;
                    rr:joinCondition [
                        rr:child "./@ITEM";
                        rr:parent "./@ITEM";
                    ];
                ]
        ] .
tedm:Lot a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasRestatedEstimatedValue;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MonetaryValueLot;
                    rr:joinCondition [
                        rr:child "if (count(../OBJECT_DESCR)=1) then 1 else ./LOT_NO";
                        rr:parent "if (count(../../OBJECT_CONTRACT/OBJECT_DESCR)=1) then ../@ITEM else ../LOT_NO";
                    ];

                ] ;
        ] .
tedm:LotAwardOutcomeAwardedMonetaryValue a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "AWARDED_CONTRACT/VALUES/VAL_TOTAL | AWARDED_CONTRACT/VALUE/VAL_TOTAL | AWARDED_CONTRACT/VAL_TOTAL";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "AWARDED_CONTRACT/VALUES/VAL_TOTAL/@CURRENCY | AWARDED_CONTRACT/VALUE/VAL_TOTAL/@CURRENCY | AWARDED_CONTRACT/VAL_TOTAL/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:LotAwardOutcomeBargainMonetaryValue a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "AWARDED_CONTRACT/VAL_BARGAIN_PURCHASE";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "AWARDED_CONTRACT/VAL_BARGAIN_PURCHASE/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:LotAwardOutcome a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasBargainPrice ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:LotAwardOutcomeBargainMonetaryValue;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAwardedValue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:LotAwardOutcomeAwardedMonetaryValue;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:describesLot ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Lot;
                    rr:joinCondition [
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ./LOT_NO";
#                        rr:parent "if (count(../OBJECT_DESCR)=1) then ./@ITEM else ./LOT_NO";
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then ../OBJECT_CONTRACT/OBJECT_DESCR else ./LOT_NO";
#                        rr:parent "if (count(../OBJECT_DESCR)=1) then ../OBJECT_DESCR else ./LOT_NO";
                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ./LOT_NO";
                        rr:parent "if (count(../OBJECT_DESCR)=1) then (if(exists(./@ITEM)) then ./@ITEM else 1) else ./LOT_NO";
#                        rr:child "if (count(../OBJECT_CONTRACT/OBJECT_DESCR)>1) then ./LOT_NO else 1";
#                        rr:parent "if (count(../OBJECT_DESCR)>1) then ./LOT_NO else if(exists(./@ITEM)) then ./@ITEM else 1";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:comprisesTenderAwardOutcome ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:TenderAwardOutcome;
                    rr:joinCondition [
#                        rr:child "./@ITEM";
#                        rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:child "./AWARDED_CONTRACT";
#                        rr:parent "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT";
                        rr:child "if(exists(./@ITEM)) then ./@ITEM else 1";
                        rr:parent "if(exists(ancestor::AWARD_CONTRACT/@ITEM)) then ancestor::AWARD_CONTRACT/@ITEM else 1";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasNonAwardedContractTitle;
            rr:objectMap
                [
                    rml:reference "if (not(../NOTICE/@TYPE='CONCESSION_AWARD_CONTRACT' or ../@FORM='F23' or ../@FORM='F25') and exists(NO_AWARDED_CONTRACT)) then TITLE else null";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasNonAwardedContractNumber;
            rr:objectMap
                [
                    rml:reference "if (exists(NO_AWARDED_CONTRACT)) then CONTRACT_NO else null";
                ]
        ] ;
# Commenting this out, as it is not the appropriate mapping for this XPath.
# This field does not appear in the publication XML, only in the reception XML.
# We might map it at a later point when EPO will provide a proper model for this.
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasAdditionalNonAwardJustification;
#            rr:objectMap
#                [
#                    rml:reference "NO_AWARDED_CONTRACT/PROCUREMENT_DISCONTINUED/NO_DOC_EXT"
#                ]
#        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasAdditionalNonAwardJustification;
#            rr:objectMap
#                [
#                    rml:reference "NO_AWARDED_PRIZE/PROCUREMENT_DISCONTINUED/NO_DOC_EXT"
#                ]
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAwardStatus;
            rr:objectMap
                [
                    rml:reference "if(exists(NO_AWARDED_CONTRACT) or exists(NO_AWARDED_PRIZE)) then 'http://publications.europa.eu/resource/authority/winner-selection-status/clos-nw' else if(exists(AWARDED_CONTRACT) or exists(AWARDED_PRIZE)) then 'http://publications.europa.eu/resource/authority/winner-selection-status/selec-w' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasNonAwardJustification;
            rr:objectMap
                [
                    rml:reference "if(exists(NO_AWARDED_CONTRACT/PROCUREMENT_UNSUCCESSFUL) or exists(NO_AWARDED_PRIZE/PROCUREMENT_UNSUCCESSFUL)) then 'http://publications.europa.eu/resource/authority/non-award-justification/none-rej' else if(exists(NO_AWARDED_CONTRACT/PROCUREMENT_DISCONTINUED)or exists(NO_AWARDED_PRIZE/PROCUREMENT_DISCONTINUED)) then 'http://publications.europa.eu/resource/authority/non-award-justification/other' else null";
                    rr:termType rr:IRI;
                ]
        ] .

tedm:ContractIdentifier a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasIdentifierValue;
            rr:objectMap
                [
                    rml:reference "CONTRACT_NO"
                ]
        ] .

#tedm:TenderRole a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:playedBy ;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ContractorOrganisation;
#                    rr:joinCondition [
#                        rr:child "path()";
#                        rr:parent "path()";
#                    ];
#                ] ;
#        ] .
tedm:Winner a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:contextualisedBy ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Procedure;
                    rr:joinCondition [
                        rr:child "if(exists(/TED_EXPORT/FORM_SECTION/F20_2014)) then 'true' else 'false'";
                        rr:parent "'true'";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:playedBy ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorOrganisation;
                    rr:joinCondition [
                    rr:child "path()";
                    rr:parent "path()";
                ];
                ] ;
        ] .
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:playedByBusiness;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:Business;
#                    rr:joinCondition [
#                        rr:child "path()";
#                        rr:parent "path()";
#                    ];
#                ] ;
#        ] .
#tedm:Business a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasBusinessSize ;
#                rr:objectMap
#                [
#                    rml:reference "if(exists(SME)) then 'http://publications.europa.eu/resource/authority/economic-operator-size/sme' else null";
##                    rr:termType rr:IRI;
#                ]
#
#        ] .
#tedm:ContractSignatoryonContractorSide a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:contextualisedBy ;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:Procedure;
#                    rr:joinCondition [
#                        rr:child "if(exists(/TED_EXPORT/FORM_SECTION/F20_2014)) then 'true' else 'false'";
#                        rr:parent "'true'";
#                    ];
#                ] ;
#        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:playedBy ;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ContractorOrganisation;
#                    rr:joinCondition [
#                        rr:child "path()";
#                        rr:parent "path()";
#                    ];
#                ] ;
#        ] .
#tedm:ContractorRole a rr:TriplesMap ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:playedBy ;
#            rr:objectMap
#                [
#                    rr:parentTriplesMap tedm:ContractorOrganisation;
#                    rr:joinCondition [
#                        rr:child "path()";
#                        rr:parent "path()";
#                    ];
#                ] ;
#        ] .

tedm:ContractorOrganisation a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasBusinessSize ;
                rr:objectMap
                [
                    rml:reference "if(exists(SME)) then 'http://publications.europa.eu/resource/authority/economic-operator-size/sme' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate rdf:type ;
                rr:objectMap
                [
                    rml:reference "if(exists(SME)) then 'http://data.europa.eu/a4g/ontology#Business' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasLegalName ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/OFFICIALNAME";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasID;
            rr:objectMap
            [
                rr:parentTriplesMap tedm:ContractorOrganisationIdentifier;
                rr:joinCondition [
                    rr:child "path()";
                    rr:parent "path()";
                ];
            ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate cv:registeredAddress ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorOrganisationAddress;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasPrimaryContactPoint ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorContactPoint;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] .
tedm:ContractorOrganisationIdentifier a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasIdentifierValue ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/NATIONALID"
                ] ;
        ] .
tedm:ContractorContactPoint a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate cpov:email ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/E_MAIL"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasInternetAddress ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/URL";
                    rr:datatype xsd:anyURI
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasFax ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/FAX"
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate cpov:telephone ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/PHONE"
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasContactName ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/CONTACT_POINT";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ]
        ] .
tedm:ContractorOrganisationAddress a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate locn:postName ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/TOWN"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate locn:thoroughfare ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/ADDRESS"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate locn:postCode ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_CONTRACTOR/POSTAL_CODE"
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasNutsCode ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(ADDRESS_CONTRACTOR/*:NUTS/@CODE))) then 'http://data.europa.eu/nuts/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasNutsCode;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:nuts;
                    rr:joinCondition [
                        rr:child "ADDRESS_CONTRACTOR/*:NUTS/@CODE";
                        rr:parent "code.value";
                    ];
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCountryCode ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(ADDRESS_CONTRACTOR/COUNTRY/@VALUE))) then 'http://publications.europa.eu/resource/authority/country/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCountryCode ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:country;
                    rr:joinCondition [
                        rr:child "ADDRESS_CONTRACTOR/COUNTRY/@VALUE";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:TenderAwardOutcome a rr:TriplesMap ;
        rr:predicateObjectMap
        [
            rr:predicate epo:describesTender ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Tender;
                    rr:joinCondition [
#                        rr:child "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:child "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT";
#                        rr:parent "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT";
                        rr:child "if(exists(ancestor::AWARD_CONTRACT/@ITEM)) then ancestor::AWARD_CONTRACT/@ITEM else 1";
                        rr:parent "if(exists(ancestor::AWARD_CONTRACT/@ITEM)) then ancestor::AWARD_CONTRACT/@ITEM else 1";
                    ];
                ] ;
        ] ;
        rr:predicateObjectMap
        [
            rr:predicate epo:indicatesAwardOfLotToWinner  ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Winner;
                    rr:joinCondition [
#                        rr:child "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:parent "ancestor::AWARD_CONTRACT/@ITEM";
#                        rr:child "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT";
#                        rr:parent "ancestor::AWARD_CONTRACT/AWARDED_CONTRACT";
                        rr:child "if(exists(ancestor::AWARD_CONTRACT/@ITEM)) then ancestor::AWARD_CONTRACT/@ITEM else 1";
                        rr:parent "if(exists(ancestor::AWARD_CONTRACT/@ITEM)) then ancestor::AWARD_CONTRACT/@ITEM else 1";
                    ];
                ] ;
        ] .

tedm:Tender a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:foreseesConcession ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ConcessionEstimate;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasItemCountryOfOrigin ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:country;
                    rr:joinCondition [
                        rr:child "COUNTRY_ORIGIN/NON_COMMUNITY_ORIGIN/@VALUE";
                        rr:parent "code.value";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasItemCountryOfOrigin;
            rr:objectMap
                [
                    rml:reference "if(exists(COUNTRY_ORIGIN/COMMUNITY_ORIGIN)) then 'http://publications.europa.eu/resource/authority/country/EUR' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:isSubmittedForLot ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:Lot;
                    rr:joinCondition [
                        rr:child "ancestor::AWARD_CONTRACT/@ITEM";
                        rr:parent "./@ITEM";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:foreseesSubcontracting ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:SubcontractingEstimate;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] .
tedm:SubcontractingEstimate a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasSubcontractingEstimatedValue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:SubcontractingEstimatedValueMonetaryValue;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasEstimatedPercentage ;
            rr:objectMap
                [
                    rml:reference "PCT_SUBCONTRACTING";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasDescription ;
            rr:objectMap
                [
                    rml:reference "INFO_ADD_SUBCONTRACTING";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ]
        ] .
tedm:SubcontractingEstimatedValueMonetaryValue a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VAL_SUBCONTRACTING";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(VAL_SUBCONTRACTING/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "VAL_SUBCONTRACTING/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:UserConcessionRevenueMonetaryValue a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VAL_REVENUE";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(VALUES/VAL_TOTAL/@CURRENCY)) and not(exists(VALUE/VAL_TOTAL/@CURRENCY)) and not(exists(VAL_TOTAL/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "VAL_REVENUE/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:BuyerConcessionRevenueMonetaryValue a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VAL_PRICE_PAYMENT";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(VALUES/VAL_TOTAL/@CURRENCY)) and not(exists(VALUE/VAL_TOTAL/@CURRENCY)) and not(exists(VAL_TOTAL/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        #rr:child "VAL_ESTIMATED_TOTAL/@CURRENCY";
                        rr:child "VAL_PRICE_PAYMENT/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:ConcessionEstimate a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCalculationMethod ;
            rr:objectMap
                [
                    rml:reference "INFO_ADD_VALUE";

                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasEstimatedUserConcessionRevenue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:UserConcessionRevenueMonetaryValue;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasEstimatedBuyerConcessionRevenue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:BuyerConcessionRevenueMonetaryValue;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] .
tedm:MonetaryValueLot a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VALUES/VAL_ESTIMATED_TOTAL | VALUE/VAL_ESTIMATED_TOTAL | VAL_ESTIMATED_TOTAL";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(VAL_ESTIMATED_TOTAL/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "VALUES/VAL_ESTIMATED_TOTAL/@CURRENCY | VALUE/VAL_ESTIMATED_TOTAL/@CURRENCY | VAL_ESTIMATED_TOTAL/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .

tedm:SubmissionStatisticalInformation a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceivedTenders;
            rr:objectMap
                [
                    rml:reference "TENDERS/NB_TENDERS_RECEIVED | NB_TENDERS_RECEIVED";
                    rr:datatype xsd:integer;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceivedSMETenders;
            rr:objectMap
                [
                    rml:reference "TENDERS/NB_TENDERS_RECEIVED_SME | NB_TENDERS_RECEIVED_SME";
                    rr:datatype xsd:integer
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceivedNonEUTenders;
            rr:objectMap
                [
                    rml:reference "TENDERS/NB_TENDERS_RECEIVED_NON_EU | NB_TENDERS_RECEIVED_NON_EU";
                    rr:datatype xsd:integer
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasElectronicTenders;
            rr:objectMap
                [
                    rml:reference "TENDERS/NB_TENDERS_RECEIVED_EMEANS | NB_TENDERS_RECEIVED_EMEANS";
                    rr:datatype xsd:integer
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasLowestReceivedTenderValue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MonetaryValueSubmissionLowest;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasHighestReceivedTenderValue ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:MonetaryValueSubmissionHighest;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasEUReceivedTenders;
            rr:objectMap
                [
                    rml:reference "TENDERS/NB_TENDERS_RECEIVED_OTHER_EU | NB_TENDERS_RECEIVED_OTHER_EU";
                    rr:datatype xsd:integer
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:summarisesInformationForLotAwardOutcome ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:LotAwardOutcome;
                    rr:joinCondition [
##                        rr:child "if (count(../../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ../LOT_NO";
##                        rr:parent "if (count(../OBJECT_DESCR)=1) then ./@ITEM else ./LOT_NO";
##                        rr:child "if (count(../../OBJECT_CONTRACT/OBJECT_DESCR)=1) then ../../OBJECT_CONTRACT/OBJECT_DESCR else ../LOT_NO";
##                        rr:parent "if (count(../OBJECT_DESCR)=1) then ../OBJECT_DESCR else ./LOT_NO";
#                        rr:child "if (count(../../OBJECT_CONTRACT/OBJECT_DESCR)=1) then 1 else ../LOT_NO";
#                        rr:parent "if (count(../OBJECT_DESCR)=1) then (if(exists(./@ITEM)) then ./@ITEM else 1) else ./LOT_NO";
                        rr:child "if(exists(../@ITEM)) then ../@ITEM else 1";
                        rr:parent "if(exists(./@ITEM)) then ./@ITEM else 1";
                    ] ;
                ] ;
        ] .

tedm:SubmissionStatisticalInformationFromResults a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceivedTenders;
            rr:objectMap
                [
                    rml:reference "PARTICIPANTS/NB_PARTICIPANTS | NB_PARTICIPANTS";
                    rr:datatype xsd:integer;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasReceivedSMETenders;
            rr:objectMap
                [
                    rml:reference "PARTICIPANTS/NB_PARTICIPANTS_SME | NB_PARTICIPANTS_SME";
                    rr:datatype xsd:integer
                ]
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasReceivedNonEUTenders;
#            rr:objectMap
#                [
#                    rml:reference "PARTICIPANTS/NB_PARTICIPANTS_OTHER_EU | NB_PARTICIPANTS_OTHER_EU";
#                    rr:datatype xsd:integer
#                ]
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasEUReceivedTenders;
            rr:objectMap
                [
                    rml:reference "PARTICIPANTS/NB_PARTICIPANTS_OTHER_EU | NB_PARTICIPANTS_OTHER_EU";
                    rr:datatype xsd:integer
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:summarisesInformationForLotAwardOutcome ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:LotAwardOutcome;
                ] ;
        ] .

tedm:MonetaryValueSubmissionHighest a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VALUES/VAL_RANGE_TOTAL/HIGH | VALUE/VAL_RANGE_TOTAL/HIGH | VAL_RANGE_TOTAL/HIGH";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(//VAL_SUBCONTRACTING[1]/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "VALUES/VAL_RANGE_TOTAL/@CURRENCY | VALUE/VAL_RANGE_TOTAL/@CURRENCY | VAL_RANGE_TOTAL/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .
tedm:MonetaryValueSubmissionLowest a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasAmountValue ;
            rr:objectMap
                [
                    rml:reference "VALUES/VAL_RANGE_TOTAL/LOW | VALUE/VAL_RANGE_TOTAL/LOW | VAL_RANGE_TOTAL/LOW";
                    rr:datatype xsd:decimal
                ] ;
        ] ;
#    rr:predicateObjectMap
#        [
#            rr:predicate epo:hasCurrency ;
#            rr:objectMap
#                [
#                    rml:reference "if (not(exists(//VAL_SUBCONTRACTING[1]/@CURRENCY))) then 'http://publications.europa.eu/resource/authority/currency/OP_DATPRO' else null";
#                    rr:termType rr:IRI;
#                ]
#
#        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasCurrency ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:currency;
                    rr:joinCondition [
                        rr:child "VALUES/VAL_RANGE_TOTAL/@CURRENCY | VALUE/VAL_RANGE_TOTAL/@CURRENCY | VAL_RANGE_TOTAL/@CURRENCY";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .

tedm:WinnerFromResults a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:playedBy ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorOrganisationFromResults;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] .

tedm:ContractorOrganisationFromResults a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasBusinessSize ;
                rr:objectMap
                [
                    rml:reference "if(exists(SME)) then 'http://publications.europa.eu/resource/authority/economic-operator-size/sme' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate rdf:type ;
                rr:objectMap
                [
                    rml:reference "if(exists(SME)) then 'http://data.europa.eu/a4g/ontology#Business' else null";
                    rr:termType rr:IRI;
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasLegalName ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/OFFICIALNAME";
                    rml:languageMap [
                        rml:reference "lower-case(ancestor::*/@LG)"
                    ]
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasID;
            rr:objectMap
            [
                rr:parentTriplesMap tedm:ContractorOrganisationFromResultsIdentifier;
                rr:joinCondition [
                    rr:child "path()";
                    rr:parent "path()";
                ];
            ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate cv:registeredAddress ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorOrganisationFromResultsAddress;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasPrimaryContactPoint ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:ContractorOrganisationFromResultsContactPoint ;
                    rr:joinCondition [
                        rr:child "path()";
                        rr:parent "path()";
                    ];
                ] ;
        ] .

tedm:ContractorOrganisationFromResultsIdentifier a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasIdentifierValue;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/NATIONALID"
                ]
        ] .

tedm:ContractorOrganisationFromResultsContactPoint a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasInternetAddress ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/URL";
                    rr:datatype xsd:anyURI
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate cpov:email ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/E_MAIL"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate epo:hasFax ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/FAX"
                ]
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate cpov:telephone ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/PHONE"
                ]
        ] .
tedm:ContractorOrganisationFromResultsAddress a rr:TriplesMap ;
    rr:predicateObjectMap
        [
            rr:predicate locn:postName ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/TOWN"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate locn:thoroughfare ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/ADDRESS"
                ] ;
        ] ;
    rr:predicateObjectMap
        [
            rr:predicate locn:postCode ;
            rr:objectMap
                [
                    rml:reference "ADDRESS_WINNER/POSTAL_CODE"
                ] ;
        ] ;

    rr:predicateObjectMap
        [
            rr:predicate epo:hasNutsCode;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:nuts;
                    rr:joinCondition [
                        rr:child "ADDRESS_WINNER/*:NUTS/@CODE";
                        rr:parent "code.value";
                    ];
                ] ;
        ] ;

    rr:predicateObjectMap
        [
            rr:predicate epo:hasCountryCode ;
            rr:objectMap
                [
                    rr:parentTriplesMap tedm:country;
                    rr:joinCondition [
                        rr:child "ADDRESS_WINNER/COUNTRY/@VALUE";
                        rr:parent "code.value";
                    ];
                ] ;
        ] .